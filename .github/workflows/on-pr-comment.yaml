name: pr-chatops

# TODO: edge case for no services checked in the list
# TODO: check if the a service is already deployed or being deployed
# TODO: add workflow for deleting services
# TODO: check if service is already deleted it being deleted
# TODO: show some kind of status updates regarding the state of deployment
# TODO: add help command to list all the available trigger commands
# TODO: spike if Jenkins can trigger an update back to the PR to say deployment/termination is complete
# TODO: comment back the github action console URL for tracking
# TODO: handle edge cases ( no services selected, ensure trigger commands start in the begining etc..)
# TODO: code cleanup, see if you can use env vars, better json files etc

on:
  issue_comment:
    types: [created]

jobs:
  list-services:
    # list all services in the form of a checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
          github.event.issue.pull_request &&
          startsWith(github.event.comment.body, '/list-services') }}
    steps:
      -
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - 
        # react to valid comment with eyes
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"eyes"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - 
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          Hello @${{ github.event.comment.user.login }}!

          Select the services you would like to deploy:

          - [ ] service1
          - [ ] service2
          - [ ] service3
          - [ ] service4
          - [ ] service5
          - [ ] service6
          - [ ] service7
          - [ ] service8
          - [ ] service9
          - [ ] service10
          EOF

          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt |  sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

          echo "Printing message.json"
          cat message.json | envsubst

      - 
        name: comment services in the pull request
        run: |
          # comment on the pr to list the sevices
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - 
        name: remove service and message files
        run: |
            echo "Removing service file: service.txt"
            rm service.txt
            echo "Removing comment payload file: message.json"
            rm message.json            

  deploy-services:
    # deploy all services from the checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
          github.event.issue.pull_request &&
          startsWith(github.event.comment.body, '/deploy-services') }}
    steps:
      -
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - 
        # react to valid comment with rocket
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - 
        name: find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with: 
          token: ${{github.token}}
          issue-number: ${{github.event.issue.number}}
          body-includes: List the services you would like to deploy
          direction: last

      - 
        name: print service list comment messages
        run: |
          echo ${{ steps.fc.outputs.comment-id }}
          echo "${{ steps.fc.outputs.comment-body }}"

      - 
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          Hello @${{ github.event.comment.user.login }}!

          The following services will be deployed:

          $(echo ${{ steps.fc.outputs.comment-body }} | grep 'x' | sed 's/$/\\n/' | tr -d '/list-services')
          EOF


          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt |  sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

          echo "Printing message.json"
          cat message.json | envsubst          

      - 
        name: add comment payload to message file
        run: |
          echo '{"body":"Hello @${{ github.event.comment.user.login }}!\nThe following services will be deployed:\n\n'$(echo '\"${{ steps.fc.outputs.comment-body }}\"' | grep 'x' | sed 's/$/\\n/' | tr -d '-' | tr '\n' ' ';echo)'"}' >> message.json

      - 
        name: comment services
        run: |
          # comment on the pr to list the sevices to be deployed
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - 
        name: remove service and message files
        run: |
            echo "Removing service file: service.txt"
            rm service.txt
            echo "Removing comment payload file: message.json"
            rm message.json   
