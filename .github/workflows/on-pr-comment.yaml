name: pr-chatops

# TODO: check if the a service is already deployed or being deployed
# TODO: add workflow for deleting services
# TODO: check if service is already deleted it being deleted
# TODO: show some kind of status updates regarding the state of deployment
# TODO: spike if Jenkins can trigger an update back to the PR to say deployment/termination is complete
# TODO: comment back the github action console URL for tracking
# TODO: code cleanup, see if you can use env vars, better json files etc

on:
  issue_comment:
    types: [created]

jobs:
  list-service:
    # list all services in the form of a checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/list-services') }}
    steps:
      - # show github context
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - # react to list comment with eyes
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"eyes"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - # create message file template for comment
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          ### Hello @${{ github.event.comment.user.login }}!

          #### Select the services you would like to deploy:

          - [ ] service1
          - [ ] service2
          - [ ] service3
          - [ ] service4
          - [ ] service5
          - [ ] service6
          - [ ] service7
          - [ ] service8
          - [ ] service9
          - [ ] service10
          EOF

          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt |  sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

          # echo "Printing message.json"
          # cat message.json | envsubst

      - # comment the list of services in the pull request
        name: comment services in the pull request
        run: |
          # comment on the pr to list the sevices
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - # remove comment template files
        name: remove service and message files
        run: |
          echo "Removing service file: service.txt"
          [ -e service.txt ] && rm service.txt
          echo "Removing comment payload file: message.json"
          [ -e message.json ] && rm message.json

  deploy-service:
    # deploy all services from the checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/deploy-services') }}
    steps:
      - # show github context
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - # find the service list and parse the services to be deployed
        name: find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          token: ${{github.token}}
          issue-number: ${{github.event.issue.number}}
          body-includes: Select the services you would like to deploy
          direction: last

      - # validate if service list exists
        name: check if services exist and they are checked
        run: |
          # create error file
          cat << EOF > error.txt
          ### Hello @${{ github.event.comment.user.login }}!

          #### No services checked or service list not found!

          Please check at least one service from the service list.
          Or comment _/list-services_ to list the available services.
          EOF

          # create error json file
          cat << EOF > error_message.json
          {
            "body": "$(cat error.txt | sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

          # exit workflow if there are no services checked
          if [ $(echo "${{ steps.fc.outputs.comment-body }}" | grep 'x' | wc -l | awk -F: '$NF+0 == 0') ];
          then
            # send thumbs down reaction to /deploy-services indicating failure
            curl ${{github.event.comment.url}}/reactions \
              -X POST \
              -d '{"content":"-1"}' \
              -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
              -H "Authorization: token ${{github.token}}"

            # coment error message
            curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{github.token}}" \
              --data-binary "@error_message.json"

            # remove error files and exit workflow
            [ -e error.txt ] && rm error.txt
            [ -e error_message.json ] && rm error_message.json
            exit 1              
          fi

          # remove error files
          [ -e error.txt ] && rm error.txt
          [ -e error_message.json ] && rm error_message.json

      - # react to deploy comment with rocket
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - # create message file template for comment
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          ### Hello @${{ github.event.comment.user.login }}!

          #### The following services will be deployed:

          $(echo "${{ steps.fc.outputs.comment-body }}" | grep 'x' | tr -d '-')
          EOF

          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt | sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

          # echo "Printing message.json"
          # cat message.json | envsubst

      - # comment the list of services to be deployed
        name: comment services to be deployed
        run: |
          # comment on the pr to list the sevices to be deployed
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - # remove comment template files
        name: remove service and message files
        run: |
          echo "Removing service file: service.txt"
          [ -e service.txt ] && rm service.txt
          echo "Removing comment payload file: message.json"
          [ -e message.json ] && rm message.json

  delete-service:
    # list all services in the form of a checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/delete-services') }}
    steps:
      - # show github context
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - # react to valid comment with thumbs up
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"+1"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - # create message file template for comment
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          ### Hello @${{ github.event.comment.user.login }}!

          #### The Preview App will be deleted! Thanks for using ChatOps!
          EOF

          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt | sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

      - # comment the preview app to be deleted
        name: comment delete services
        run: |
          # comment on the pr to list the sevices to be deployed
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - # remove comment template files
        name: remove service and message files
        run: |
          echo "Removing service file: service.txt"
          [ -e service.txt ] && rm service.txt
          echo "Removing comment payload file: message.json"
          [ -e message.json ] && rm message.json

  help-service:
    # list all services in the form of a checklist
    runs-on: ubuntu-latest
    if: ${{ github.event.comment &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/help') }}
    steps:
      - # show github context
        name: show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END

      - # react to valid comment with thumbs up
        name: add reation to comment
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"+1"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

      - # create message file template for comment
        name: creating message file
        run: |
          # service file
          cat << EOF > service.txt
          ### Hello @${{ github.event.comment.user.login }}!

          #### Welcome to Preview App ChatOps!

          Comment the following to trigger ChatOps bot:

          * /list-services   ( To list all the available services)
          * /deploy-services ( To deploy the selected services)
          * /delete-services ( To delete the preview app )
          * /help            ( To list all the available chatops commands)

          EOF

          # message file
          cat << EOF > message.json
          {
            "body": "$(cat service.txt | sed 's/$/\\n/' | tr '\n' ' ';echo)"
          }
          EOF

      - # list all the help commands via comment
        name: comment all help commands
        run: |
          # comment on the pr to list the sevices to be deployed
          curl  "https://api.github.com/repos/${{github.repository}}/issues/${{github.event.issue.number}}/comments" \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{github.token}}" \
            --data-binary "@message.json"

      - # remove comment template files
        name: remove service and message files
        run: |
          echo "Removing service file: service.txt"
          [ -e service.txt ] && rm service.txt
          echo "Removing comment payload file: message.json"
          [ -e message.json ] && rm message.json
